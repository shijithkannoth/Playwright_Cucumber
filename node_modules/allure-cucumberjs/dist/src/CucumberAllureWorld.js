"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CucumberAllureWorld = void 0;
const cucumber_1 = require("@cucumber/cucumber");
const allure_js_commons_1 = require("allure-js-commons");
const internal_1 = require("allure-js-commons/internal");
class CucumberAllureWorld extends cucumber_1.World {
    async label(label, value) {
        const msgBody = {
            labels: [
                {
                    name: label,
                    value,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async link(url, name, type) {
        const msgBody = {
            links: [
                {
                    name,
                    url,
                    type,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async parameter(name, value, options) {
        const msgBody = {
            parameter: [
                {
                    name,
                    value: JSON.stringify(value),
                    excluded: (options === null || options === void 0 ? void 0 : options.excluded) || false,
                    mode: options === null || options === void 0 ? void 0 : options.mode,
                },
            ],
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async description(markdown) {
        const msgBody = {
            description: markdown,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async descriptionHtml(html) {
        const msgBody = {
            descriptionHtml: html,
        };
        await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
    }
    async step(name, body) {
        const testStep = new allure_js_commons_1.AllureCommandStepExecutable(name);
        await testStep.run(body, async (msgBody) => {
            await this.attach(JSON.stringify(msgBody), internal_1.ALLURE_METADATA_CONTENT_TYPE);
        });
    }
    async id(allureId) {
        await this.label(allure_js_commons_1.LabelName.ALLURE_ID, allureId);
    }
    async epic(epic) {
        await this.label(allure_js_commons_1.LabelName.EPIC, epic);
    }
    async layer(layer) {
        await this.label(allure_js_commons_1.LabelName.LAYER, layer);
    }
    async feature(feature) {
        await this.label(allure_js_commons_1.LabelName.FEATURE, feature);
    }
    async story(story) {
        await this.label(allure_js_commons_1.LabelName.STORY, story);
    }
    async suite(name) {
        await this.label(allure_js_commons_1.LabelName.SUITE, name);
    }
    async parentSuite(name) {
        await this.label(allure_js_commons_1.LabelName.PARENT_SUITE, name);
    }
    async subSuite(name) {
        await this.label(allure_js_commons_1.LabelName.SUB_SUITE, name);
    }
    async owner(owner) {
        await this.label(allure_js_commons_1.LabelName.OWNER, owner);
    }
    async severity(severity) {
        await this.label(allure_js_commons_1.LabelName.SEVERITY, severity);
    }
    async tag(tag) {
        await this.label(allure_js_commons_1.LabelName.TAG, tag);
    }
    async issue(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.ISSUE);
    }
    async tms(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.TMS);
    }
}
exports.CucumberAllureWorld = CucumberAllureWorld;
//# sourceMappingURL=CucumberAllureWorld.js.map